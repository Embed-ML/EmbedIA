from embedia.core.neural_net_layer import NeuralNetLayer


class Pooling(NeuralNetLayer):
    """
    The Pooling layer is a layer that requires additional data beyond the input
    data. However, these values can be assigned directly to the additional data
    structure in its declaration. For this reason, it inherits from the "Layer"
    class that implements the basic behavior of an EmbedIA layer/element and
    not from the "DataLayer" class that implements an initialization function.
    This structure is declared as static in the before the invocation of the C
    function that implements the layer function.
    Normally, the programmer must implement the "predict" method, with the
    invocation to the EmbedIA function (previously implemented in "neural_net.c")
    that performs the layer processing.
    This class encompasses the behavior of the pooling layers (Average, Max,
    etc.) and in principle it is not necessary to create subclasses for the
    implementation of each type. In particular it implements the
    "get_pool_name" method that uses an automatic naming rule from the name of
    the Keras pooling function for all pooling layers. The "predict" method
    invokes the C function (which must be defined in "neural_net.h" and
    implemented in "neural_net.c") using this name.
    Ex: For the pooling function named "avg_pool" for 2 dimensions, the C
    function named "avg_pooling2d_layer" will be called, composed by the first
    part of the name "avg" followed by "_pooling" + "input dimension" +
    "d_layer".

    Layer wrapper required properties:
        - strides => (height, width)
        - pool_size => (height, width)
        - dimensions => 2 because the pooling
        - function_name => function name for pooling layers ex: "avg_pooling2d_layer"
    """

    def __init__(self, model, wrapper, **kwargs):
        super().__init__(model, wrapper, **kwargs)


    @property
    def pool_name(self):
        """
        Gets the name of the EmbedIA function to be invoked to perform the
        layer processing. The definition of the function with this name must
        be defined in some ".h" and implemented in respective ".c".

        Parameters
        ----------
        layer : object
            pooling layer object

        Returns
        -------
        str
            name of EmbedIA pooling function to call in predict method

        """
        return '%s_pooling%dd_layer' % (self._wrapper.function_name, self._wrapper.dimensions)

    @property
    def struct_data_type(self):
        """
        gets automatic embedia name for structure associated with layer/element
        Returns
        -------
        str
            embedia type name for layer/element.
        """
        return 'pooling%dd_layer_t' % self._wrapper.dimensions

    def invoke(self, input_name, output_name):
        """
        Generates C code for the invoke the EmbedIA function that implements
        the layer/element. The C function must be previously implemented in
        "neural_net.c" and by convention should be called by the name
        autogenerated "get_pool_name" method.

        Parameters
        ----------
        input_name : str
            name of the input variable to be used in the invocation of the C
            function that implements the layer.
        output_name : str
            name of the output variable to be used in the invocation of the C
            function that implements the layer.

        Returns
        -------
        str
            C code with the invocation of the function that performs the
            processing of the layer in the file "neural_net.c".

        """

        name = self.name
        pool_name = self.pool_name
        strides = self._wrapper.strides[0]
        pool_size = self._wrapper.pool_size[0]
        dim = self._wrapper.dimensions
        text = f'''static const pooling{dim}d_layer_t {name}_data = {{ {pool_size}, {strides} }};
{pool_name}({name}_data, {input_name}, &{output_name});'''
        return text
